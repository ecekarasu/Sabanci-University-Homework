# -*- coding: utf-8 -*-
"""longest_common_subsequence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B8cDYSXl0gfpnmo20NQ9WNoLGQDaRru3
"""

import time
import numpy as np

def readFile(fname):
  f = open(fname, "r")
  sequences = []
  for line in f.readlines():
    sequences.append(line[:-1])
  return sequences

# DNA_sequences = []
# DNA_sequences.append(readFile("length5.txt"))
# DNA_sequences.append(readFile("length10.txt"))
# DNA_sequences.append(readFile("length15.txt"))
# DNA_sequences.append(readFile("length20.txt"))
# DNA_sequences.append(readFile("length25.txt"))

# DNA_pairs = []
# for sequences in DNA_sequences:
#   pairs = []
#   # for k in range(len(sequences)):
#   for k in range(5):
#     pairs.append((sequences[k], sequences[(k+1) % 30]))
#   DNA_pairs.append(pairs)

DNA_pairs = [[('aaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbb')]]

#a recursive algorithm to compute the LCS of two strings
def lcs_naive(X,Y,i,j):
  if (i == 0 or j == 0):
    return 0
  elif X[i-1] == Y[j-1]:
    return 1 + lcs_naive(X,Y,i-1,j-1)
  else:
    return max(lcs_naive(X,Y,i,j-1),lcs_naive(X,Y,i-1,j))

#a recursive algorithm to compute the LCS of two strings, with memoization    
def lcs_memo(X,Y,i,j):
  if c[i][j] >= 0:
    return c[i][j]
  if (i == 0 or j == 0):
    c[i][j] = 0
  elif X[i-1] == Y[j-1]:
    c[i][j] = 1 + lcs_memo(X,Y,i-1,j-1)
  else:
    c[i][j] = max(lcs_memo(X,Y,i,j-1),lcs_memo(X,Y,i-1,j))
  return c[i][j]

times_memo = []
for i in range(len(DNA_pairs)):
  times = []
  for j in range(len(DNA_pairs[i])):
    start_time = time.time()
    X = DNA_pairs[i][j][0]
    Y = DNA_pairs[i][j][1]
    lX = len(X)
    lY = len(Y)
    c = [[-1 for k in range(lY+1)] for l in range(lX+1)]
    lcs_memo(X,Y,lX,lY)
    end_time = time.time()
    times.append(end_time - start_time)
  times_memo.append(times)
times_memo = np.array(times_memo)

# measures_memo = []
# for i in range(len(times_memo)):
#   measures_memo.append((np.mean(times_memo[i]),np.std(times_memo[i])))
# print("measures_memo: ", measures_memo)
print("measures_memo: ", times_memo)

times_naive = []
for i in range(len(DNA_pairs)):
  times = []
  for j in range(len(DNA_pairs[i])):
    start_time = time.time()
    X = DNA_pairs[i][j][0]
    Y = DNA_pairs[i][j][1]
    lX = len(X)
    lY = len(Y)
    lcs_naive(X,Y,lX,lY)
    end_time = time.time()
    times.append(end_time - start_time)
  times_naive.append(times)
times_naive = np.array(times_naive)

# measures_naive = []
# for i in range(len(times_naive)):
#   measures_naive.append((np.mean(times_naive[i]),np.std(times_naive[i])))
# print("measures_naive: ", measures_naive)
print("measures_naive: ", times_naive)

# """20.44 kodu calistirdik <3""" ps: calismadi